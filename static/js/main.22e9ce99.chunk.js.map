{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoItem/TodoItem.tsx","components/Loader/Loader.tsx","api.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["Type","actions","todo","type","payload","currentTodoReducer","state","action","set","remove","query","status","clearQuery","initialParams","filterReducer","todos","addTodos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","TodoItem","id","completed","title","dispatch","className","classNames","onClick","currentTodoAction","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","Status","TodoList","useState","isError","setIsError","isLoading","setIsLoading","useEffect","todosList","todosAction","catch","finally","visibleTodos","useMemo","newTodos","toLowerCase","includes","active","all","length","map","TodoFilter","searchQuery","setSearchQuery","onChange","e","value","filterActions","hanleStatusChange","target","placeholder","event","style","pointerEvents","TodoModal","user","setUser","userId","href","email","name","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22e9ce99.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\nenum Type {\n  set = 'currentTodo/SET',\n  remove = 'currentTodo/REMOVE',\n}\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nlet stateTodo = null;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case Type.set:\n      stateTodo = action.payload;\n\n      return stateTodo;\n\n    case Type.remove:\n      stateTodo = null;\n\n      return stateTodo;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\nenum Type {\n  query = 'add/query',\n  clearQuery = 'add/clear',\n  status = 'add/status',\n}\n\ntype QueryAction = { type: Type.query, payload: string };\ntype StatusAction = { type: Type.status, payload: Status };\ntype ClearAction = { type: Type.clearQuery };\n\ntype Actions = QueryAction | StatusAction | ClearAction;\n\nconst addQuery = (query: string) => ({ type: Type.query, payload: query });\nconst addStatus = (status: Status) => ({ type: Type.status, payload: status });\nconst clearQuery = () => ({ type: Type.clearQuery });\n\nexport const actions = { addQuery, addStatus, clearQuery };\n\ntype Param = {\n  query: string,\n  status: Status,\n};\n\nconst initialParams: Param = { query: '', status: 'all' };\n\nconst filterReducer = (\n  state: Param = initialParams,\n  action: Actions,\n): Param => {\n  switch (action.type) {\n    case Type.query:\n      return { ...state, query: action.payload };\n    case Type.status:\n      return { ...state, status: action.payload };\n    case Type.clearQuery:\n      return { ...state, query: '' };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\nenum Type {\n  addTodos = 'todos/ADD',\n}\n\ntype AddTodos = { type: Type.addTodos, payload: Todo[] };\n\nconst addTodos = (todos: Todo[]): AddTodos => (\n  { type: Type.addTodos, payload: todos }\n);\n\nexport const actions = { addTodos };\n\nconst todosReducer = (todos: Todo[] = [], action: AddTodos): Todo[] => {\n  if (action.type === Type.addTodos) {\n    return action.payload;\n  }\n\n  return todos;\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\r\nimport { AppDispatch, RootState } from './store';\r\n\r\nexport const useAppDispatch: () => AppDispatch = useDispatch;\r\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\r\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { useDispatch } from 'react-redux';\nimport { Todo } from '../../types/Todo';\nimport { actions as currentTodoAction } from '../../features/currentTodo';\nimport { useAppSelector } from '../../app/hooks';\n\ntype Props = {\n  todo: Todo;\n};\n\nexport const TodoItem: React.FC<Props> = ({ todo }) => {\n  const { id, completed, title } = todo;\n  const dispatch = useDispatch();\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n\n  return (\n    <>\n      <tr data-cy=\"todo\" key={id}>\n        <td className=\"is-vcentered\">{id}</td>\n        {completed ? (\n          <td className=\"is-vcentered\">\n            <span className=\"icon\" data-cy=\"iconCompleted\">\n              <i className=\"fas fa-check\" />\n            </span>\n          </td>\n        ) : (\n          <td className=\"is-vcentered\" />\n        )}\n        <td className=\"is-vcentered is-expanded\">\n          <p\n            className={classNames({\n              'has-text-danger': !completed,\n              'has-text-success': completed,\n            })}\n          >\n            {title}\n          </p>\n        </td>\n        <td className=\"has-text-right is-vcentered\">\n          <button\n            data-cy=\"selectButton\"\n            className=\"button\"\n            type=\"button\"\n            onClick={() => dispatch(currentTodoAction.setTodo(todo))}\n          >\n            <span className=\"icon\">\n              <i\n                className={\n                  id === currentTodo?.id ? 'far fa-eye-slash' : 'far fa-eye'\n                }\n              />\n            </span>\n          </button>\n        </td>\n      </tr>\n    </>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\r\nimport { User } from './types/User';\r\n\r\n// eslint-disable-next-line max-len\r\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\r\n\r\nfunction wait(delay: number): Promise<void> {\r\n  return new Promise(resolve => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n}\r\n\r\nfunction get<T>(url: string): Promise<T> {\r\n  // eslint-disable-next-line prefer-template\r\n  const fullURL = BASE_URL + url + '.json';\r\n\r\n  return wait(300)\r\n    .then(() => fetch(fullURL))\r\n    .then(res => res.json());\r\n}\r\n\r\nexport const getTodos = () => get<Todo[]>('/todos');\r\n\r\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\r\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport { Todo } from '../../types/Todo';\nimport { useAppSelector } from '../../app/hooks';\nimport { Loader } from '../Loader';\nimport { getTodos } from '../../api';\nimport { actions as todosAction } from '../../features/todos';\n\nenum Status {\n  all = 'all',\n  active = 'active',\n  completed = 'completed',\n}\n\nexport const TodoList: React.FC = () => {\n  const todos = useAppSelector((state) => state.todos);\n  const { query, status } = useAppSelector((state) => state.filter);\n  const [isError, setIsError] = useState<boolean>(false);\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    setIsError(false);\n    setIsLoading(true);\n\n    getTodos()\n      .then((todosList) => dispatch(todosAction.addTodos(todosList)))\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const visibleTodos = useMemo(() => {\n    const newTodos = query\n      ? todos.filter((todo) => todo.title.toLowerCase().includes(query))\n      : todos;\n\n    switch (status) {\n      case Status.active:\n        return newTodos.filter((todo) => !todo.completed);\n\n      case Status.completed:\n        return newTodos.filter((todo) => todo.completed);\n\n      case Status.all:\n      default:\n        return newTodos;\n    }\n  }, [query, status, todos]);\n\n  return (\n    <>\n      {!isLoading && !isError && visibleTodos.length === 0 && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {isLoading && !isError && <Loader />}\n\n      {!isLoading && !isError && visibleTodos.length > 0 && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map((todo: Todo) => (\n              <TodoItem todo={todo} key={todo.id} />\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useDispatch();\n  const [searchQuery, setSearchQuery] = useState('');\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchQuery(event.target.value);\n    dispatch(filterActions.addQuery(event.target.value));\n  };\n\n  const handleInputClear = () => {\n    setSearchQuery('');\n    dispatch(filterActions.clearQuery());\n  };\n\n  const hanleStatusChange = (value: Status) => {\n    dispatch(filterActions.addStatus(value));\n  };\n\n  return (\n    <form className=\"field has-addons\">\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            onChange={(e) => {\n              const value = e.target.value as Status;\n\n              hanleStatusChange(value);\n            }}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          onChange={handleInputChange}\n          value={searchQuery}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {searchQuery && (\n            // eslint-disable-next-line jsx-a11y/control-has-associated-label\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleInputClear}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { Loader } from '../Loader';\nimport { useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n  const dispatch = useDispatch();\n  const [user, setUser] = useState<User | null>(null);\n  const [isError, setIsError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsError(false);\n    setIsLoading(true);\n\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .catch(() => setIsError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [currentTodo]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading && !isError && <Loader />}\n\n      {!isLoading && !isError && user && currentTodo && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            <button\n              type=\"button\"\n              aria-label=\"close\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={() => dispatch(actions.removeTodo())}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {!currentTodo.completed && (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {currentTodo.completed && (\n                <strong className=\"has-text-success\">Done</strong>\n              )}\n\n              {' by '}\n\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { useAppSelector } from './app/hooks';\n\nexport const App: React.FC = () => {\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              <TodoList />\n            </div>\n            {currentTodo && <TodoModal />}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { HashRouter as Router } from 'react-router-dom';\r\n\r\nimport { store } from './app/store';\r\nimport { App } from './App';\r\n\r\n// Just a convenient component with all the wrappers for the `App`\r\n// The Router component (if you use it) should be placed inside the Provider\r\nconst Root = () => (\r\n  <Provider store={store}>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </Provider>\r\n);\r\n\r\nReactDOM.render(<Root />, document.getElementById('root'));\r\n"],"sourceRoot":""}